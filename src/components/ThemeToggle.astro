---
import ThemeToggle from "./ThemeToggle";
---

<ThemeToggle client:load />

<style is:global>
  /* Keep only the parts needed for the theme toggle functionality */
  .theme-transition {
    transition:
      color 0.3s ease,
      background-color 0.3s ease;
  }

  /* Apply transitions to specific elements */
  body,
  .theme-transition {
    transition:
      color 0.3s ease,
      background-color 0.3s ease;
  }

  #themeToggle {
    border: 0;
    background: none;
    color: currentColor; /* Changed from var(--color-text) */
    width: 28px;
    height: 28px;
    padding: 0;
    cursor: pointer;
  }

  #themeToggle svg {
    width: 100%;
    height: 100%;
  }
</style>

<script>
  function applyTheme(theme: "light" | "dark") {
    if (theme === "light") {
      document.documentElement.classList.remove("dark");
    } else {
      document.documentElement.classList.add("dark");
    }
    document.documentElement.classList.add("theme-transition");
    localStorage.setItem("theme", theme);
  }

  function getThemePreference(): "light" | "dark" {
    return (
      (localStorage.getItem("theme") as "light" | "dark") ||
      (window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light")
    );
  }

  // Apply theme on initial load
  document.addEventListener("DOMContentLoaded", () => {
    applyTheme(getThemePreference());
  });

  // Listen for astro:page-load event to apply theme after navigation
  document.addEventListener("astro:page-load", () => {
    applyTheme(getThemePreference());
  });

  // Listen for astro:after-swap event for view transitions
  document.addEventListener("astro:after-swap", () => {
    applyTheme(getThemePreference());
  });

  // Remove transition class to prevent transition on page load
  window.addEventListener("load", () => {
    document.documentElement.classList.remove("theme-transition");
  });

  // Observe theme changes and update localStorage
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === "class") {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      }
    });
  });

  observer.observe(document.documentElement, { attributes: true });
</script>
