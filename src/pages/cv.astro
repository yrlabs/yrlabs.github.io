---
import ProseCv from "../components/Prose_cv.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import { Icon } from "astro-icon/components";
import { Contact } from "../components/cv";
import ThemeToggle from "../components/ThemeToggle";
import "../styles/cv-print.css";

import { getEntry, render } from "astro:content";
const entry = await getEntry("cv", "resume");
const { Content, headings } = await render(entry);

// Get all data from frontmatter
const { 
  title, 
  description: resumeDescription, 
  fullName,
  sections = [
    { id: "experience", label: "Experience" },
    { id: "skills", label: "Skills" },
    { id: "languages", label: "Languages" },
    { id: "education", label: "Education" }
  ],
  contacts = []
} = entry.data;

// Page metadata - built from resume data
const pageTitle = title ? `${title} | CV` : "Erfi Anugrah - CV";
const description = resumeDescription || "Professional CV for Erfi Anugrah - Customer Solutions Engineer at Cloudflare with expertise in solution design, technical onboarding, and customer success.";
const site_name = "stoicopa";

// Person schema for structured data
const personSchema = {
  "@context": "https://schema.org",
  "@type": "Person",
  "name": title || "Erfi Anugrah",
  "jobTitle": resumeDescription || "Customer Solutions Engineer",
  "url": new URL(Astro.url.pathname, Astro.site).href,
  "sameAs": contacts?.map(contact => contact.url) || [],
  "workLocation": {
    "@type": "Place",
    "name": entry.data.companies?.[0]?.name || "Cloudflare"
  },
  "knowsAbout": ["Web Development", "Cloud Computing", "Network Security"]
};

// Helper function for shorter contact labels on mobile
const getShortLabel = (contact) => {
  switch(contact.icon) {
    case 'mail': return 'Email';
    case 'linkedin': return 'LinkedIn';
    case 'github': return 'GitHub';
    case 'website': return 'Web';
    default: return contact.value;
  }
};
---

<BaseLayout
  title={pageTitle}
  description={description}
  site_name={site_name}
  is404Page={false}
  hideHeaderFooter={true}
>
  <!-- Structured data for SEO -->
  <script type="application/ld+json" set:html={JSON.stringify(personSchema)} />
  
  <!-- Basic inline print styles -->
  <style>
    @media print {
      @page { size: A4; margin: 1cm; }
      /* Add some basic styles here in case the external stylesheet doesn't load */
      body { font-family: 'Inconsolata', monospace !important; font-size: 11pt; color: #000; }
    }
  </style>

  <div class="cv-print-wrapper max-w-4xl mx-auto bg-white dark:bg-slate-800 shadow-lg rounded-lg overflow-hidden print:shadow-none print:border print:border-slate-200">
    <!-- Header section with responsive design -->
    <div class="bg-slate-100 dark:bg-slate-700 px-4 sm:px-8 py-6 border-b border-slate-200 dark:border-slate-600 print:bg-white print:border-slate-200">
      <div class="flex flex-col md:flex-row md:justify-between md:items-start gap-4">
        <div class="space-y-2">
          <h1 class="text-2xl sm:text-3xl font-bold text-slate-800 dark:text-slate-100 font-inconsolata uppercase tracking-wide">
            {fullName}
          </h1>
          <p class="text-base sm:text-lg text-slate-600 dark:text-slate-300 font-inconsolata print:hidden">
            {resumeDescription}
          </p>
          
          <!-- Social links with better mobile spacing -->
          <div class="mt-3 flex flex-wrap gap-x-4 gap-y-2 font-inconsolata text-sm">
            {contacts && contacts.map((contact) => (
              <a 
                href={contact.url} 
                class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition font-medium flex items-center"
                target="_blank"
                rel="noopener noreferrer"
                title={getShortLabel(contact)}
              >
                <Icon name={`mdi:${contact.icon === 'mail' ? 'email' : contact.icon}`} class="w-4 h-4 mr-1.5" />
                <span>{contact.value}</span>
              </a>
            ))}
          </div>
        </div>
        <div class="mt-2 md:mt-0 self-start print:hidden">
          <div class="flex items-center gap-3">
            <div>
              <ThemeToggle client:load />
            </div>
            <div class="relative group">
              <button id="print-cv" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2.5 px-5 rounded-md transition flex items-center text-sm sm:text-base shadow-md hover:shadow-lg">
                <Icon name="mdi:printer" class="h-4 w-4 sm:h-5 sm:w-5 mr-1.5 sm:mr-2" width="20" height="20" />
                Save as PDF
              </button>
              <div class="absolute right-0 top-full mt-2 w-72 bg-white dark:bg-slate-700 shadow-lg rounded-md p-3 text-xs text-slate-700 dark:text-slate-200 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10 border border-slate-200 dark:border-slate-600">
                This will open your browser's print dialog where you can save as PDF. All styling, colors and formatting will be preserved in the PDF output.
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Mobile-optimized navigation -->
    <div class="bg-white dark:bg-slate-900 border-b border-slate-200 dark:border-slate-700 px-4 sm:px-8 py-3 sticky top-0 z-10 print:hidden">
      <nav class="cv-nav">
        <button class="md:hidden w-full text-left flex items-center justify-between py-1 font-inconsolata" id="mobile-nav-toggle">
          <span class="font-medium text-slate-700 dark:text-slate-300">Navigate Sections</span>
          <Icon name="mdi:chevron-down" class="w-5 h-5 transition-transform text-slate-500" id="nav-toggle-icon" />
        </button>
        <ul class="hidden md:flex md:flex-wrap gap-x-6 gap-y-2 font-inconsolata transition-all max-h-0 md:max-h-none overflow-hidden" id="section-links" role="list" aria-label="CV Sections Navigation">
          {sections.map(section => (
            <li>
              <a 
                href={`#${section.id}`} 
                class="text-slate-600 hover:text-blue-600 dark:text-slate-300 dark:hover:text-blue-400 font-medium text-sm transition section-link focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:rounded-sm"
                aria-current={Astro.url.hash === `#${section.id}` ? "true" : "false"}
              >
                {section.label}
              </a>
            </li>
          ))}
        </ul>
      </nav>
    </div>

    <!-- CV content -->
    <div id="cv-content" data-updated-date={new Date(entry.data.updatedDate).toLocaleDateString('en-US', {year: 'numeric', month: 'short', day: 'numeric'})}>
      <ProseCv>
        <Content />
      </ProseCv>
    </div>
    
  </div>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Cache DOM elements for better performance
    const elements = {
      navToggle: document.getElementById('mobile-nav-toggle'),
      navLinks: document.getElementById('section-links'),
      navIcon: document.getElementById('nav-toggle-icon'),
      sectionLinks: document.querySelectorAll('.section-link'),
      sections: document.querySelectorAll('h2[id]'),
      printButton: document.getElementById('print-cv')
    };

    // Mobile navigation toggle
    if (elements.navToggle && elements.navLinks && elements.navIcon) {
      elements.navToggle.addEventListener('click', () => {
        const expanded = elements.navToggle.getAttribute('aria-expanded') === 'true';
        elements.navToggle.setAttribute('aria-expanded', (!expanded).toString());
        
        if (expanded) {
          elements.navLinks.classList.remove('expanded');
          elements.navLinks.classList.add('hidden');
          elements.navLinks.style.maxHeight = '0';
          elements.navIcon.classList.remove('rotate-180');
        } else {
          elements.navLinks.classList.add('expanded');
          elements.navLinks.classList.remove('hidden');
          elements.navLinks.style.maxHeight = elements.navLinks.scrollHeight + 'px';
          elements.navIcon.classList.add('rotate-180');
        }
      });
      
      // Close menu on Escape key
      elements.navLinks.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && window.innerWidth < 768) {
          elements.navToggle.setAttribute('aria-expanded', 'false');
          elements.navLinks.classList.add('hidden');
          elements.navIcon.classList.remove('rotate-180');
          elements.navToggle.focus();
        }
      });
    }

    // No need to add IDs to section headings anymore since we're using CVSection components
    // No need for skill visualization enhancements since we're using the SkillBar component

    // Enhanced print functionality
    if (elements.printButton) {
      elements.printButton.addEventListener('click', () => {
        // Create a notification with more helpful text
        const notification = document.createElement('div');
        notification.className = 'fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-blue-700 text-white px-6 py-4 rounded-md shadow-xl z-50 transition-all duration-500 text-center max-w-md print:hidden';
        notification.innerHTML = `
          <div class="font-bold text-lg mb-2">Opening Print Dialog...</div>
          <div class="text-sm mb-3">When the dialog opens, select "Save as PDF" for best results</div>
          <div class="text-xs">All styling and formatting will be preserved in the PDF</div>
        `;
        document.body.appendChild(notification);
        
        // Trigger print after a small delay to allow the notification to show
        setTimeout(() => {
          // Hide notification right before printing to ensure it doesn't show in print
          notification.style.display = 'none';
          window.print();
          
          // Show and then fade out notification after print dialog appears
          setTimeout(() => {
            notification.style.display = '';
            setTimeout(() => {
              notification.style.opacity = '0';
              notification.style.transform = 'translate(-50%, -50%) scale(0.9)';
              setTimeout(() => {
                if (notification.parentNode) {
                  document.body.removeChild(notification);
                }
              }, 500);
            }, 500);
          }, 500);
        }, 800);
      });
    }

    // Section navigation with highlighting
    document.querySelectorAll('.section-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        if (targetId) {
          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            // Add highlight effect
            targetElement.classList.add('highlight-section');
            setTimeout(() => targetElement.classList.remove('highlight-section'), 2000);
            
            // Calculate offset based on sticky header
            const headerHeight = document.querySelector('.cv-nav')?.offsetHeight || 0;
            const targetPosition = targetElement.getBoundingClientRect().top + window.pageYOffset - headerHeight - 20;
            
            // Smooth scroll
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
            
            // Update active state
            document.querySelectorAll('.section-link').forEach(lnk => {
              lnk.classList.remove('active');
              lnk.classList.remove('text-blue-600', 'dark:text-blue-400', 'font-semibold');
              lnk.classList.add('text-slate-600', 'dark:text-slate-300');
              lnk.setAttribute('aria-current', 'false');
            });
            
            link.classList.add('active');
            link.classList.add('text-blue-600', 'dark:text-blue-400', 'font-semibold');
            link.classList.remove('text-slate-600', 'dark:text-slate-300');
            link.setAttribute('aria-current', 'true');
            
            // Close mobile nav if needed
            if (window.innerWidth < 768 && elements.navLinks.classList.contains('expanded')) {
              elements.navToggle.setAttribute('aria-expanded', 'false');
              elements.navLinks.classList.remove('expanded');
              elements.navLinks.classList.add('hidden');
              elements.navLinks.style.maxHeight = '0';
              elements.navIcon.classList.remove('rotate-180');
            }
            
            // Update URL hash without scrolling
            history.replaceState(null, null, `#${targetId}`);
          }
        }
      });
    });
    
    // Active section tracking with Intersection Observer
    const observerOptions = {
      root: null,
      rootMargin: '-80px 0px -40% 0px',
      threshold: 0
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const id = entry.target.getAttribute('id');
          if (id) {
            // Update URL hash without scrolling
            history.replaceState(null, null, `#${id}`);
            
            // Update active nav link
            document.querySelectorAll('.section-link').forEach(link => {
              const href = link.getAttribute('href');
              const isActive = href === `#${id}`;
              
              link.classList.toggle('active', isActive);
              link.classList.toggle('text-blue-600', isActive);
              link.classList.toggle('dark:text-blue-400', isActive);
              link.classList.toggle('font-semibold', isActive);
              link.classList.toggle('text-slate-600', !isActive);
              link.classList.toggle('dark:text-slate-300', !isActive);
              link.setAttribute('aria-current', isActive ? 'true' : 'false');
            });
          }
        }
      });
    }, observerOptions);
    
    // Observe all section headings
    elements.sections.forEach(section => observer.observe(section));
    
    // Initial check for hash in URL
    if (location.hash) {
      const id = location.hash.substring(1);
      const link = document.querySelector(`.section-link[href="#${id}"]`);
      if (link) {
        link.classList.add('active');
        link.classList.add('text-blue-600', 'dark:text-blue-400', 'font-semibold');
        link.classList.remove('text-slate-600', 'dark:text-slate-300');
        link.setAttribute('aria-current', 'true');
      }
    }
    
    // No expandable sections
  });
</script>

<!-- 
  Simple PDF generation using browser's print functionality:
  - Uses the browser's native print dialog
  - All print styles are applied through CSS media queries
  - Provides a notification when opening the print dialog
  - Simple and reliable approach
-->

<style>
  /* Mobile navigation dropdown */
  @media (max-width: 768px) {
    #section-links.expanded {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      padding: 0.75rem 0;
      max-height: 200px;
      transition: max-height 0.3s ease-in-out;
    }
  }

  /* Active state for navigation */
  .cv-nav a.active {
    color: var(--color-blue-600);
    font-weight: 600;
  }
  
  :global(.dark) .cv-nav a.active {
    color: var(--color-blue-400);
  }

  /* Section highlight animation */
  @keyframes highlight-pulse {
    0% { background-color: rgba(59, 130, 246, 0.1); }
    100% { background-color: transparent; }
  }

  .highlight-section {
    animation: highlight-pulse 2s ease-out;
  }
  
  /* Ensure job content is always visible */
  @media print {
    .job-content {
      display: block !important;
      height: auto !important;
      max-height: none !important;
      opacity: 1 !important;
      visibility: visible !important;
      overflow: visible !important;
    }
    
    .job-header {
      background-color: transparent !important;
    }
  }
</style>
